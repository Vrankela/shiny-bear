files:
    "c:/software/sendFile.ps1":
      content: |
       function Send-EMLFile ($filename) {
          try {
            [string]$message = Get-Content $filename -Raw
            $r = @{"key"= "YourKeyHere"; "raw_message" = $message }
            $output = Invoke-RestMethod -Uri https://mandrillapp.com/api/1.0/messages/send-raw.json -Body $r -Method Post
            if ($output.status -ne "sent") {
              # Sending failed
              throw "Error sending message - " + $Output.reject_reason
            }
          }
          catch {
            $_
          }
          finally {}
        }
        Set-DefaultAWSRegion -Region eu-west-1
        # CD to dropmail location
        $dir = "C:\SMTPPickup\Dropmail"
        $emlfiles = Get-ChildItem ($dir + "\*.eml")
        if ($emlfiles.Length -gt 0) {
            foreach ($file in [string[]]$emlfiles.FullName) {
                try {
                    #rename the file
                    [string]$filename = $file + ".processing"
                    Rename-Item -Path $file -NewName $filename
                    # Send the email
                    Send-EMLFile $filename
                    # rename to archive
                    Rename-Item -Path $filename -NewName ($filename -replace ".processing$", ".archive")
                    [string](get-date) + ": " + $filename | Out-File ($dir + "\log.txt") -Append
                }
                catch {
                    Get-Date | Out-File ($dir + "\error.txt") -Append
                    $_ | Out-File ($dir + "\error.txt") -Append
                }
                finally {}
            }
        }
    "c:/software/archiveEmail.ps1":
      content: |
        $dir = "C:\SMTPPickup\Dropmail"
        $emlfiles = Get-ChildItem ($dir + "\*.archive")
        if ($emlfiles.Length -gt 0) {
            foreach ($file in [string[]]$emlfiles.FullName) {
                try {
                    #rename the file
                    $filename = $file -replace ".archive$", ".upload"
                    Rename-Item -Path $file -NewName $filename
                    $barefile = $file -replace "C:\\SMTPPickup\\Dropmail\\", ""
                    # Upload to S3
                    Write-S3Object -BucketName archived-emails -File $filename -Key "archive/$barefile" 
                    # delete
                    Remove-Item $filename
                }
                catch {
                    Get-Date | Out-File ($dir + "\archive-error.txt") -Append
                    $_ | Out-File ($dir + "\archive-error.txt") -Append
                }
                finally {}
            }
        }
    "c:/software/scheduleMail.ps1":
      content: |
        mkdir "C:\SMTPPickup\Dropmail"
        $timespan = New-TimeSpan -Minutes 1
        $duration = New-TimeSpan -day 2000
        $Trigger = New-ScheduledTaskTrigger -Once -at (Get-Date) -RepetitionInterval $timespan -RepetitionDuration $duration
        $action = New-ScheduledTaskAction -Execute "Powershell.exe" -Argument " -ExecutionPolicy Bypass -File c:\software\sendFile.ps1" -WorkingDirectory "C:\SMTPPickup\Dropmail"
        $STPrin = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount
        try {
            Register-ScheduledTask -TaskName SendEmails -Trigger $Trigger -Action $action -Principal $STPrin
            Get-ScheduledTask SendEmails | Export-Clixml "C:\SMTPPickup\Dropmail\task.xml"
        }
        catch {
           Send-SESEmail -Destination_ToAddresses "your-email@gmail.com" -Source "your-email@gmail.com" -Message_Body_Text_Data [string]$_ -Message_Subject_Data "Error"
        }
        finally {}
        $timespan = New-TimeSpan -Minutes 10
        $action = New-ScheduledTaskAction -Execute "Powershell.exe" -Argument " -ExecutionPolicy Bypass -File c:\software\archiveEmail.ps1" -WorkingDirectory "C:\SMTPPickup\Dropmail"
        $Trigger = New-ScheduledTaskTrigger -Once -at (Get-Date) -RepetitionInterval $timespan -RepetitionDuration $duration
        try {
            Register-ScheduledTask -TaskName ArchiveEmails -Trigger $Trigger -Action $action -Principal $STPrin
            Get-ScheduledTask SendEmails | Export-Clixml "C:\SMTPPickup\Dropmail\archivetask.xml"
        }
        catch {
           Send-SESEmail -Destination_ToAddresses "your-email@gmail.com" -Source "your-email@gmail.com" -Message_Body_Text_Data [string]$_ -Message_Subject_Data "Error"
        }
commands:       
    00-configure-mail-schedule:
       command: Powershell.exe -ExecutionPolicy Bypass -File c:\\software\\scheduleMail.ps1
       cwd: "c:/software"
